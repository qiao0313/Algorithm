"""
数组中数字出现的次数: 一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。

解题思路：
题目要求时间复杂度 O(N) ，空间复杂度 O(1) ，因此首先排除 暴力法 和 哈希表统计法 。
设整型数组 nums 中出现一次的数字为 x ，出现两次的数字为 a, a, b, b, ...a,a,b,b,... ，即：nums=[a,a,b,b,...,x]
异或运算有个重要的性质，两个相同数字异或为 00 ，即对于任意整数 a 有 a⊕a=0 。因此，若将 nums 中所有数字执行异或运算，留下的结果则为 出现一次的数字 x
数组 nums 有 两个 只出现一次的数字，因此无法通过异或直接得到这两个数字。
设两个只出现一次的数字为 x , y ，由于 x = y ，则 x 和 y 二进制至少有一位不同（即分别为 0 和 1 ），根据此位可以将 nums 拆分为分别包含 x 和 y 的两个子数组。
易知两子数组都满足 「除一个数字之外，其他数字都出现了两次」。因此，仿照以上简化问题的思路，分别对两子数组遍历执行异或操作，即可得到两个只出现一次的数字 x, y 。
算法流程：
1.遍历 nums 执行异或
2.循环左移计算 m
3.拆分 nums 为两个子数组
4.分别遍历两个子数组执行异或
5.返回值
"""


class Solution:
    def singleNumbers(self, nums):
        x, y, n, m = 0, 0, 0, 1
        for num in nums:  # 1. 遍历异或
            n ^= num
        while n & m == 0:  # 2. 循环左移，计算 m
            m <<= 1
        for num in nums:  # 3. 遍历 nums 分组
            if num & m:  # 4. 当 num & m != 0
                x ^= num
            else:
                y ^= num
        return x, y
